const studentSchema = z.object({
    firstName: z.string().min(1, { message: "First name is required" }),
    lastName: z.string().min(1, { message: "Last name is required" }),
    course: z.string().min(1, { message: "Course selection is required" }),
    phone: z.string().regex(/^\+91\d{10}$/, { message: "Must be a valid 10-digit phone number with +91 country code" }),
    birthdate: z.string().min(1, { message: "Date of birth is required" }),
    email: z.string().email({ message: "Invalid email address" }),
    state: z.string().min(1, { message: "State is required" }),
    pincode: z.string().regex(/^\d{6}$/, { message: "Must be a valid 6-digit pincode" }).optional().or(z.literal('')),
    emergencyContactPhone: z.string().regex(/^\d{10}$/, { message: "Must be a valid 10-digit phone number" }).optional().or(z.literal('')),
    // Optional fields can be defined without validators if they are just strings
    age: z.number().optional(),
    qualification: z.string().optional(),
    degreeName: z.string().optional(),
    casteCategory: z.string().optional(),
    dateOfRegistration: z.string(),
    documentsSubmitted: z.string().optional(),
    status: z.string(),
    photoUrl: z.string().url({ message: "Invalid URL format" }).optional().or(z.literal('')),
    fatherFullName: z.string().optional(),
    motherFullName: z.string().optional(),
    emergencyContactName: z.string().optional(),
    bloodGroup: z.string().optional(),
    medicalConditions: z.string().optional(),
});